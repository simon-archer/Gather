{
  "version": 3,
  "sources": ["islands/UnifiedIsland/SubjectCard.ts"],
  "sourcesContent": ["import { h } from \"preact\";\nimport { useState } from \"preact/hooks\";\nimport { tw } from \"twind\";\n\nexport default function SubjectCard({ message, voiceId, setAudioBlob }) {\n  let data;\n  try {\n    // Parse function_call.arguments\n    data = JSON.parse(message.choices[0].message.function_call.arguments);\n  } catch (error) {\n    console.error('Error parsing message:', error);\n    data = {};\n  }\n  const { title, explanation, keycontents } = data;\n  const [isCollapsed, setIsCollapsed] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  console.log(\"Title: \" + title)\n  console.log(\"Explanation: \" + explanation)\n\n  const handleListen = async () => {\n    setIsLoading(true);\n    setIsListening(true);\n    const textToConvert = `${title}.     ${explanation}`;\n    const response = await fetch(`/api/audio`, {\n      method: 'POST',\n      body: JSON.stringify({ script: textToConvert, voiceId: voiceId }),\n      headers: { 'Content-Type': 'application/json' },\n  });\n\n  if (response.ok) {\n    const blob = await response.blob();\n    console.log('Blob:', blob);\n    setAudioBlob(blob);\n    setIsLoading(false);\n    setIsListening(false);\n    return blob;\n  }\n};\n\n  return h(\"div\", { \n    class: tw`flex flex-col items-center justify-center p-4 bg-white rounded-lg shadow-lg cursor-pointer m-4 mx-auto max-w-2xl `\n  }, [\n    h(\"h1\", { class: tw`text-3xl sm:text-4xl md:text-5xl font-bold mb-4 text-blue-600 text-center` }, title),\n    keycontents && isCollapsed && h(\"div\", { class: tw`flex flex-wrap gap-2 mb-4 justify-center font-semibold flex-wrap` }, \n      Object.values(keycontents).map(keycontent => \n        h(\"span\", { class: tw`bg-white text-gray-700 rounded-full text-sm` }, keycontent)\n    )),\n    !isCollapsed && h(\"p\", { class: tw`text-sm mb-4 text-gray-700 text-center` }, explanation), // Conditional rendering here\n    h(\"div\", { class: tw`flex gap-2` }, [\n      h(\"button\", { \n          onClick: () => setIsCollapsed(!isCollapsed),\n          class: tw`mt-auto text text-sm bg-white text-gray-700 border border-gray-800 p-2 rounded-full opacity-50 focus:outline-none`\n        }, isCollapsed ? \"Show Script\" : \"Show Keypoints\"),\n      !isListening && setAudioBlob && h(\"button\", { \n        onClick: handleListen, \n        class: tw`bg-[#38A1FF] hover:bg-[#318BDC] mt-auto text-sm font-semibold text-white border p-2 rounded-full focus:outline-none`\n      }, isLoading ? \"Loading...\" : \"Listen\" ),\n      isListening && h(\"div\", { class: tw`audio-spinner absolute bottom-10 left-1/2 transform p-4 text-center` }),\n    ]),\n  ]);\n}\n"],
  "mappings": "2GAIe,SAAR,YAA6B,CAAE,QAAS,QAAS,YAAa,EAAG,CACtE,IAAI,KACJ,GAAI,CAEF,KAAO,KAAK,MAAM,QAAQ,QAAQ,CAAC,EAAE,QAAQ,cAAc,SAAS,CACtE,OAAS,MAAO,CACd,QAAQ,MAAM,yBAA0B,KAAK,EAC7C,KAAO,CAAC,CACV,CACA,GAAM,CAAE,MAAO,YAAa,WAAY,EAAI,KACtC,CAAC,YAAa,cAAc,EAAI,EAAS,EAAI,EAC7C,CAAC,UAAW,YAAY,EAAI,EAAS,EAAK,EAC1C,CAAC,YAAa,cAAc,EAAI,EAAS,EAAK,EACpD,QAAQ,IAAI,UAAY,KAAK,EAC7B,QAAQ,IAAI,gBAAkB,WAAW,EAEzC,IAAM,aAAe,SAAY,CAC/B,aAAa,EAAI,EACjB,eAAe,EAAI,EACnB,IAAM,cAAgB,GAAG,KAAK,SAAS,WAAW,GAC5C,SAAW,MAAM,MAAM,aAAc,CACzC,OAAQ,OACR,KAAM,KAAK,UAAU,CAAE,OAAQ,cAAe,OAAiB,CAAC,EAChE,QAAS,CAAE,eAAgB,kBAAmB,CAClD,CAAC,EAED,GAAI,SAAS,GAAI,CACf,IAAM,KAAO,MAAM,SAAS,KAAK,EACjC,eAAQ,IAAI,QAAS,IAAI,EACzB,aAAa,IAAI,EACjB,aAAa,EAAK,EAClB,eAAe,EAAK,EACb,IACT,CACF,EAEE,OAAO,GAAE,MAAO,CACd,MAAO,qHACT,EAAG,CACD,GAAE,KAAM,CAAE,MAAO,6EAA8E,EAAG,KAAK,EACvG,aAAe,aAAe,GAAE,MAAO,CAAE,MAAO,oEAAqE,EACnH,OAAO,OAAO,WAAW,EAAE,IAAI,YAC7B,GAAE,OAAQ,CAAE,MAAO,+CAAgD,EAAG,UAAU,CACpF,CAAC,EACD,CAAC,aAAe,GAAE,IAAK,CAAE,MAAO,0CAA2C,EAAG,WAAW,EACzF,GAAE,MAAO,CAAE,MAAO,cAAe,EAAG,CAClC,GAAE,SAAU,CACR,QAAS,IAAM,eAAe,CAAC,WAAW,EAC1C,MAAO,qHACT,EAAG,YAAc,cAAgB,gBAAgB,EACnD,CAAC,aAAe,cAAgB,GAAE,SAAU,CAC1C,QAAS,aACT,MAAO,uHACT,EAAG,UAAY,aAAe,QAAS,EACvC,aAAe,GAAE,MAAO,CAAE,MAAO,uEAAwE,CAAC,CAC5G,CAAC,CACH,CAAC,CACH",
  "names": []
}
